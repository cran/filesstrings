% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports_deprecated.R, R/files_deprecated.R,
%   R/filesstrings.R, R/strings_deprecated.R, R/utils_deprecated.R
\name{PasteCollapseListElems}
\alias{PasteCollapseListElems}
\alias{StrListRemoveEmpties}
\alias{CharListElemsNthElem}
\alias{NumListElemsNthElem}
\alias{CreateDirsIfNotThere}
\alias{RemoveDirs}
\alias{MergeTablesOnDisk}
\alias{MoveFiles}
\alias{NiceFileNums}
\alias{RemoveFileNameSpaces}
\alias{RenameWithNums}
\alias{UnitDirs}
\alias{filesstrings-deprecated}
\alias{CanBeNumeric}
\alias{GetCurrencies}
\alias{GetCurrency}
\alias{DuplicatesToSingles}
\alias{NiceNums}
\alias{ExtractNumbers}
\alias{ExtractNonNumerics}
\alias{NthNumber}
\alias{NthNonNumeric}
\alias{StrSplitByNums}
\alias{StrElem}
\alias{StrElemsPasted}
\alias{StringToVec}
\alias{StringsWithPatterns}
\alias{StrAfterNth}
\alias{StrBeforeNth}
\alias{BeforeLastDot}
\alias{ExtendCharVec}
\alias{PasteDifferentLengths}
\alias{PutInPos}
\alias{TrimAnything}
\alias{CountMatches}
\alias{LocateBraces}
\alias{RemoveQuoted}
\alias{GiveExt}
\alias{SplitCamelCase}
\alias{AllEqual}
\alias{GroupClose}
\title{Deprecated functions}
\usage{
PasteCollapseListElems(char_list, collapse = "")

StrListRemoveEmpties(char_list)

CharListElemsNthElem(char_list, n)

NumListElemsNthElem(num_list, n)

CreateDirsIfNotThere(dir.names)

RemoveDirs(dirs)

MergeTablesOnDisk(file.names, delim, out.name, header = TRUE, ...)

MoveFiles(files, destinations)

NiceFileNums(dir = ".", pattern = NA)

RemoveFileNameSpaces(dir = ".", pattern = "", replace.with = "")

RenameWithNums(dir = ".", pattern = NULL)

UnitDirs(unit, pattern = NULL, dir = ".")

CanBeNumeric(string)

GetCurrencies(string)

GetCurrency(strings)

DuplicatesToSingles(string, pattern)

NiceNums(strings)

ExtractNumbers(string, leave.as.string = FALSE, decimals = FALSE,
  leading.decimals = FALSE, negs = FALSE)

ExtractNonNumerics(string, decimals = FALSE, leading.decimals = FALSE,
  negs = FALSE)

NthNumber(string, n = 1, leave.as.string = FALSE, decimals = FALSE,
  leading.decimals = FALSE, negs = FALSE)

NthNonNumeric(string, n = 1, decimals = FALSE, leading.decimals = FALSE,
  negs = FALSE)

StrSplitByNums(string, decimals = FALSE, leading.decimals = FALSE,
  negs = FALSE)

StrElem(string, index)

StrElemsPasted(string, indices)

StringToVec(string)

StringsWithPatterns(strings, patterns, ignore.case = FALSE, any = FALSE)

StrAfterNth(strings, pattern, n = 1)

StrBeforeNth(strings, pattern, n = 1)

BeforeLastDot(string)

ExtendCharVec(char.vec, extend.by = NA, length.out = NA)

PasteDifferentLengths(files, sep = "")

PutInPos(strings, positions)

TrimAnything(string, pattern, side = "both")

CountMatches(string, pattern)

LocateBraces(string)

RemoveQuoted(string)

GiveExt(string, ext, replace = FALSE)

SplitCamelCase(string, lower = FALSE)

AllEqual(a, b = NULL)

GroupClose(vec.ascending, max.gap = 1)
}
\arguments{
\item{char_list}{A list of character vectors.}

\item{collapse}{See \code{\link{paste}}.}

\item{n}{A natural number to identify the \eqn{n}th occurrence (defaults to
first (\code{n = 1})). This can be negatively indexed, so if you wish to select
the \emph{last} occurrence, you need \code{n = -1}, for the second-last, you
need \code{n = -2} and so on.}

\item{num_list}{A list of numeric vectors.}

\item{dir.names}{The name of the directories, specified via relative or
absolute paths.}

\item{dirs}{The names of the directories, specified via relative or absolute
paths.}

\item{file.names}{The paths to the files to merge.}

\item{delim}{Delimeter used to separate values.}

\item{out.name}{The path to the output file containing the merged tables.}

\item{header}{Do the tables to be merged have headers?}

\item{...}{Additional arguments passed to \link[readr:read_delim]{readr::read_delim}.}

\item{files}{A character vector of files to be read in via \code{readLines}
to be pasted. If you would like to use this function on vectors already in
the environment (without reading in files), pass them into this argument as
a list (see the examples).}

\item{destinations}{A character vector of the destination directories into
which to move the files.}

\item{dir}{The directory in which to rename the files (relative or absolute
path). Defaults to current working directory.}

\item{pattern}{A character vector. Tegular expression(s) of the pattern(s)
that we wish not to be duplicated.}

\item{replace.with}{What do you want to replace the spaces with? This
defaults to nothing, another sensible choice would be an underscore.}

\item{unit}{The unit upon which to base the categorising.}

\item{string}{A string.}

\item{strings}{A character vector.}

\item{leave.as.string}{Do you want to return the number as a string (\code{TRUE})
or as numeric (\code{FALSE}, the default)?}

\item{decimals}{Do you want to include the possibility of decimal numbers
(\code{TRUE}) or not (\code{FALSE}, the default).}

\item{leading.decimals}{Do you want to allow a leading decimal point to be
the start of a number?}

\item{negs}{Do you want to allow negative numbers? Note that double negatives
are not handled here (see the examples).}

\item{index}{An integer. Negative indexing is allowed as in
\code{\link[stringr:str_sub]{stringr::str_sub()}}.}

\item{indices}{A numeric vector of positive integers detailing the indices of
the characters of \code{string} that we wish to paste together.}

\item{patterns}{Regular expressions.}

\item{ignore.case}{Do we want to ignore case when matching patterns?}

\item{any}{Set this to \code{TRUE} if you want to see which strings match
\emph{any} of the patterns and not \emph{all} (all is the default).}

\item{char.vec}{A character vector. The thing you wish to expand.}

\item{extend.by}{A non-negative integer. By how much do you wish to extend
the vector?}

\item{length.out}{A positive integer. How long do you want the output vector
to be?}

\item{sep}{What (if anything) do you want to paste in between things as
you're pasting them together.}

\item{positions}{The indices of the charachter vector to be occupied by the
elements of strings. Must be the same length as strings or of length 1.}

\item{side}{Which side do you want to trim from? \code{"both"} is the
default, but you can also have just either \code{"left"} or \code{"right"}
(or optionally the shorthands \code{"b"}, \code{"l"} and \code{"r"}).}

\item{ext}{The intended file extension (with or without the ".").}

\item{replace}{If the file has an extension already, replace it (or append
the new extension name)?}

\item{lower}{Do you want the output to be all lower case (or as is)?}

\item{a}{A vector.}

\item{b}{Either \code{NULL} or a vector of length either 1 or \code{length(a)}}

\item{vec.ascending}{A strictly increasing numeric vector.}

\item{max.gap}{The biggest allowable gap between adjacent elements for them
to be considered part of the same \emph{group}.}
}
\value{
Invisibly, a logical vector with \code{TRUE} for each success and
\code{FALSE} for failures. See \link[base:unlink]{base::unlink}.

A character vector. \code{TRUE} if the argument can be considered to be numeric or \code{FALSE}
otherwise.
}
\description{
These functions have been deprecated, mostly because the naming style of the
package has been changed. To figure out which function to run instead, run
the deprecated function of interest and you'll get a warning message telling
you which function to use instead.
}
